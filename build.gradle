/*
 *    Copyright (C) 2015 QAware GmbH
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id "com.gradle.plugin-publish" version "0.12.0"
    id "com.github.hierynomus.license" version "0.15.0"
    id "com.github.kt3k.coveralls" version "2.10.2"
    id "com.jfrog.bintray" version "1.8.5"
    id "distribution"
}

allprojects {
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    group = 'de.qaware.seu.as.code'

    repositories {
        jcenter()
        mavenCentral()
    }

    jacoco {
        toolVersion = "0.8.6"
    }
}

subprojects {
    apply plugin: 'base'
    apply plugin: 'groovy'
    apply plugin: 'java'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'maven-publish'
    apply plugin: 'com.gradle.plugin-publish'
    apply plugin: 'com.jfrog.bintray'

    license {
        includes(["**/*.java", "**/*.groovy"])
        mapping {
            java = 'SLASHSTAR_STYLE'
            groovy = 'SLASHSTAR_STYLE'
        }
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        implementation gradleApi()
        implementation 'org.codehaus.groovy:groovy-all:2.5.12'

        testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5'
        testImplementation 'org.hamcrest:hamcrest-library:1.3'
        testRuntimeOnly 'cglib:cglib-nodep:3.2.9'
        testRuntimeOnly 'org.objenesis:objenesis:2.6'
        testImplementation 'com.athaydes:spock-reports:1.2.10'
    }

    test {
        reports {
            junitXml.enabled = false
            html.enabled = true
        }
    }

    // This disables the pedantic doclint feature of JDK8
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    jacocoTestReport {
        group = 'Coverage'
        description = 'Generate Jacoco coverage report for subproject'

        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage') {
    description = 'Generates aggregate Jacoco coverage report from all subprojects'
    dependsOn(subprojects.test)

    reports {
        html.enabled = true
        xml.enabled = true
    }

    doFirst {
        executionData(files(executionData.findAll { it.exists() }))
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

def isCI = System.env.'CI' == 'true'
tasks.coveralls {
    group = 'Coverage'
    description = 'Upload aggregate Jacoco coverage report to Coveralls'

    dependsOn jacocoRootReport
    onlyIf { isCI }
}

distributions {
    release {
        distributionBaseName = 'seuac-plugins'
        contents {
            from('seuac-base-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-credentials-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-git-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-svn-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-platform-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-homebrew-plugin/build/libs') {
                include '*.jar'
            }
            from('seuac-chocolatey-plugin/build/libs') {
                include '*.jar'
            }
        }
    }
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
}
